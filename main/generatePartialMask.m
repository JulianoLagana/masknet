function [ pMask ] = generatePartialMask( boxes, j, segmentation, pMaskSize)
% generatepartialMask(mask, bbox) generates the partial mask to be used by
% masknet corresponding to the 'j'-th bounding box of the predicted bounding
% boxes 'boxes'.
%
% Inputs:
%
%   - boxes : Nx4 matrix specifying the N bounding boxes generated by
%   Selective Search. Each bounding box is specified as a 1x4 vector
%   [x y w h], where x and y are the coordinates of the top left corner of 
%   the bounding box and w and h specify the height and width of it. Note 
%   that the coordinate system used for x and y is 1-based, meaning that 
%   the topmost left pixel of any image has coordinates (1,1) (not 0,0).
%   
%   - j : index of the bounding box in 'boxes' to which the partial mask 
%   should be generated.
%
%   - segmentation : WxHx1 segmentation image, where each pixel value is
%   the number of the class to which it most probably belongs.
%
%   - pMaskSize : Desired spatial size for the output partial mask.
%
% Outputs:
%
%   - pMask : Binary image representing the partial mask to be used by 
%   masknet. Each pixel belongs to {0, 1}.
%

    % Filter the segmentation to keep only the pixels of the class of
    % the chosen predicted bbox
    predictedClass = boxes(j,end);
    mask1 = segmentation == predictedClass;

    % For all other bounding boxes of the same class, occlude the mask
    % with them
    matchingIdxs = find(boxes(:,end)==predictedClass)';
    matchingIdxs(matchingIdxs == j) = [];
    mask2 = mask1;
    for iBox = matchingIdxs
        mask2 = occludeMask(mask2,boxes(iBox,1:4));
    end

    % Crop segmentation to current bbox
    mask3 = cutPatch(mask2,boxes(j,1:4));
    
    % Resize and convert to int8
    pMask = int8(imresize(mask3,pMaskSize));
    
    

end

